
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.12.1
 * Query Engine version: cf0680a1bfe8d5e743dc659cc7f08009f9587d58
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;





/**
 * Model Link
 */

export type Link = {
  id: number
  createdAt: Date
  description: string
  url: string
  postedById: number
}

/**
 * Model User
 */

export type User = {
  id: number
  name: string
  email: string
  password: string
}

/**
 * Model Vote
 */

export type Vote = {
  id: number
  linkId: number
  userId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Links
 * const links = await prisma.link.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Links
   * const links = await prisma.link.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.link`: Exposes CRUD operations for the **Link** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Links
    * const links = await prisma.link.findMany()
    * ```
    */
  get link(): Prisma.LinkDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.12.1
   * Query Engine version: cf0680a1bfe8d5e743dc659cc7f08009f9587d58
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Link: 'Link',
    User: 'User',
    Vote: 'Vote'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: string
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Link
   */


  export type AggregateLink = {
    count: number
    avg: LinkAvgAggregateOutputType | null
    sum: LinkSumAggregateOutputType | null
    min: LinkMinAggregateOutputType | null
    max: LinkMaxAggregateOutputType | null
  }

  export type LinkAvgAggregateOutputType = {
    id: number
    postedById: number
  }

  export type LinkSumAggregateOutputType = {
    id: number
    postedById: number
  }

  export type LinkMinAggregateOutputType = {
    id: number
    postedById: number
  }

  export type LinkMaxAggregateOutputType = {
    id: number
    postedById: number
  }


  export type LinkAvgAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type LinkSumAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type LinkMinAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type LinkMaxAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type AggregateLinkArgs = {
    where?: LinkWhereInput
    orderBy?: XOR<Enumerable<LinkOrderByInput>, LinkOrderByInput>
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LinkDistinctFieldEnum>
    count?: true
    avg?: LinkAvgAggregateInputType
    sum?: LinkSumAggregateInputType
    min?: LinkMinAggregateInputType
    max?: LinkMaxAggregateInputType
  }

  export type GetLinkAggregateType<T extends AggregateLinkArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetLinkAggregateScalarType<T[P]>
  }

  export type GetLinkAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof LinkAvgAggregateOutputType ? LinkAvgAggregateOutputType[P] : never
  }
    
    

  export type LinkSelect = {
    id?: boolean
    createdAt?: boolean
    description?: boolean
    url?: boolean
    postedBy?: boolean | UserArgs
    postedById?: boolean
    votes?: boolean | FindManyVoteArgs
  }

  export type LinkInclude = {
    postedBy?: boolean | UserArgs
    votes?: boolean | FindManyVoteArgs
  }

  export type LinkGetPayload<
    S extends boolean | null | undefined | LinkArgs,
    U = keyof S
      > = S extends true
        ? Link
    : S extends undefined
    ? never
    : S extends LinkArgs | FindManyLinkArgs
    ?'include' extends U
    ? Link  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'postedBy'
        ? UserGetPayload<S['include'][P]> :
        P extends 'votes'
        ? Array < VoteGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Link ?Link [P]
  : 
          P extends 'postedBy'
        ? UserGetPayload<S['select'][P]> :
        P extends 'votes'
        ? Array < VoteGetPayload<S['select'][P]>>  : never
  } 
    : Link
  : Link


  export interface LinkDelegate {
    /**
     * Find zero or one Link that matches the filter.
     * @param {FindUniqueLinkArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueLinkArgs>(
      args: Subset<T, FindUniqueLinkArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link | null>, Prisma__LinkClient<LinkGetPayload<T> | null>>
    /**
     * Find the first Link that matches the filter.
     * @param {FindFirstLinkArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstLinkArgs>(
      args?: Subset<T, FindFirstLinkArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link | null>, Prisma__LinkClient<LinkGetPayload<T> | null>>
    /**
     * Find zero or more Links that matches the filter.
     * @param {FindManyLinkArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Links
     * const links = await prisma.link.findMany()
     * 
     * // Get first 10 Links
     * const links = await prisma.link.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const linkWithIdOnly = await prisma.link.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyLinkArgs>(
      args?: Subset<T, FindManyLinkArgs>
    ): CheckSelect<T, Promise<Array<Link>>, Promise<Array<LinkGetPayload<T>>>>
    /**
     * Create a Link.
     * @param {LinkCreateArgs} args - Arguments to create a Link.
     * @example
     * // Create one Link
     * const Link = await prisma.link.create({
     *   data: {
     *     // ... data to create a Link
     *   }
     * })
     * 
    **/
    create<T extends LinkCreateArgs>(
      args: Subset<T, LinkCreateArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link>, Prisma__LinkClient<LinkGetPayload<T>>>
    /**
     * Delete a Link.
     * @param {LinkDeleteArgs} args - Arguments to delete one Link.
     * @example
     * // Delete one Link
     * const Link = await prisma.link.delete({
     *   where: {
     *     // ... filter to delete one Link
     *   }
     * })
     * 
    **/
    delete<T extends LinkDeleteArgs>(
      args: Subset<T, LinkDeleteArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link>, Prisma__LinkClient<LinkGetPayload<T>>>
    /**
     * Update one Link.
     * @param {LinkUpdateArgs} args - Arguments to update one Link.
     * @example
     * // Update one Link
     * const link = await prisma.link.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LinkUpdateArgs>(
      args: Subset<T, LinkUpdateArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link>, Prisma__LinkClient<LinkGetPayload<T>>>
    /**
     * Delete zero or more Links.
     * @param {LinkDeleteManyArgs} args - Arguments to filter Links to delete.
     * @example
     * // Delete a few Links
     * const { count } = await prisma.link.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LinkDeleteManyArgs>(
      args: Subset<T, LinkDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Links.
     * @param {LinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Links
     * const link = await prisma.link.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LinkUpdateManyArgs>(
      args: Subset<T, LinkUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Link.
     * @param {LinkUpsertArgs} args - Arguments to update or create a Link.
     * @example
     * // Update or create a Link
     * const link = await prisma.link.upsert({
     *   create: {
     *     // ... data to create a Link
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Link we want to update
     *   }
     * })
    **/
    upsert<T extends LinkUpsertArgs>(
      args: Subset<T, LinkUpsertArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link>, Prisma__LinkClient<LinkGetPayload<T>>>
    /**
     * Find zero or one Link that matches the filter.
     * @param {FindUniqueLinkArgs} args - Arguments to find a Link
     * @deprecated This will be deprecated please use prisma.link.findUnique
     * @example
     * // Get one Link
     * const link = await prisma.link.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueLinkArgs>(
      args: Subset<T, FindUniqueLinkArgs>
    ): CheckSelect<T, Prisma__LinkClient<Link | null>, Prisma__LinkClient<LinkGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyLinkArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateLinkArgs>(args: Subset<T, AggregateLinkArgs>): Promise<GetLinkAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Link.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LinkClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    postedBy<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    votes<T extends FindManyVoteArgs = {}>(args?: Subset<T, FindManyVoteArgs>): CheckSelect<T, Promise<Array<Vote>>, Promise<Array<VoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Link findUnique
   */
  export type FindUniqueLinkArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: XOR<LinkSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<LinkInclude, null>
    /**
     * Filter, which Link to fetch.
    **/
    where: LinkWhereUniqueInput
  }


  /**
   * Link findFirst
   */
  export type FindFirstLinkArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: XOR<LinkSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<LinkInclude, null>
    /**
     * Filter, which Link to fetch.
    **/
    where?: LinkWhereInput
    orderBy?: XOR<Enumerable<LinkOrderByInput>, LinkOrderByInput>
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LinkDistinctFieldEnum>
  }


  /**
   * Link findMany
   */
  export type FindManyLinkArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: XOR<LinkSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<LinkInclude, null>
    /**
     * Filter, which Links to fetch.
    **/
    where?: LinkWhereInput
    /**
     * Determine the order of the Links to fetch.
    **/
    orderBy?: XOR<Enumerable<LinkOrderByInput>, LinkOrderByInput>
    /**
     * Sets the position for listing Links.
    **/
    cursor?: LinkWhereUniqueInput
    /**
     * The number of Links to fetch. If negative number, it will take Links before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Links.
    **/
    skip?: number
    distinct?: Enumerable<LinkDistinctFieldEnum>
  }


  /**
   * Link create
   */
  export type LinkCreateArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: XOR<LinkSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<LinkInclude, null>
    /**
     * The data needed to create a Link.
    **/
    data: LinkCreateInput
  }


  /**
   * Link update
   */
  export type LinkUpdateArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: XOR<LinkSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<LinkInclude, null>
    /**
     * The data needed to update a Link.
    **/
    data: LinkUpdateInput
    /**
     * Choose, which Link to update.
    **/
    where: LinkWhereUniqueInput
  }


  /**
   * Link updateMany
   */
  export type LinkUpdateManyArgs = {
    data: LinkUpdateManyMutationInput
    where?: LinkWhereInput
  }


  /**
   * Link upsert
   */
  export type LinkUpsertArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: XOR<LinkSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<LinkInclude, null>
    /**
     * The filter to search for the Link to update in case it exists.
    **/
    where: LinkWhereUniqueInput
    /**
     * In case the Link found by the `where` argument doesn't exist, create a new Link with this data.
    **/
    create: LinkCreateInput
    /**
     * In case the Link was found with the provided `where` argument, update it with this data.
    **/
    update: LinkUpdateInput
  }


  /**
   * Link delete
   */
  export type LinkDeleteArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: XOR<LinkSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<LinkInclude, null>
    /**
     * Filter which Link to delete.
    **/
    where: LinkWhereUniqueInput
  }


  /**
   * Link deleteMany
   */
  export type LinkDeleteManyArgs = {
    where?: LinkWhereInput
  }


  /**
   * Link without action
   */
  export type LinkArgs = {
    /**
     * Select specific fields to fetch from the Link
    **/
    select?: XOR<LinkSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<LinkInclude, null>
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: number
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
  }

  export type UserMaxAggregateOutputType = {
    id: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
  }

  export type AggregateUserArgs = {
    where?: UserWhereInput
    orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserDistinctFieldEnum>
    count?: true
    avg?: UserAvgAggregateInputType
    sum?: UserSumAggregateInputType
    min?: UserMinAggregateInputType
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends AggregateUserArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
  }

  export type GetUserAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
  }
    
    

  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    links?: boolean | FindManyLinkArgs
    votes?: boolean | FindManyVoteArgs
  }

  export type UserInclude = {
    links?: boolean | FindManyLinkArgs
    votes?: boolean | FindManyVoteArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | FindManyUserArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'links'
        ? Array < LinkGetPayload<S['include'][P]>>  :
        P extends 'votes'
        ? Array < VoteGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'links'
        ? Array < LinkGetPayload<S['select'][P]>>  :
        P extends 'votes'
        ? Array < VoteGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  export interface UserDelegate {
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Find the first User that matches the filter.
     * @param {FindFirstUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstUserArgs>(
      args?: Subset<T, FindFirstUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyUserArgs>(
      args?: Subset<T, FindManyUserArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: Subset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: Subset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: Subset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args: Subset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: Subset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: Subset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @deprecated This will be deprecated please use prisma.user.findUnique
     * @example
     * // Get one User
     * const user = await prisma.user.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    links<T extends FindManyLinkArgs = {}>(args?: Subset<T, FindManyLinkArgs>): CheckSelect<T, Promise<Array<Link>>, Promise<Array<LinkGetPayload<T>>>>;

    votes<T extends FindManyVoteArgs = {}>(args?: Subset<T, FindManyVoteArgs>): CheckSelect<T, Promise<Array<Vote>>, Promise<Array<VoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type FindUniqueUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type FindFirstUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserDistinctFieldEnum>
  }


  /**
   * User findMany
   */
  export type FindManyUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * Determine the order of the Users to fetch.
    **/
    orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
    /**
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserDistinctFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * The data needed to create a User.
    **/
    data: UserCreateInput
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * The data needed to update a User.
    **/
    data: UserUpdateInput
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: UserCreateInput
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: UserUpdateInput
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
  }



  /**
   * Model Vote
   */


  export type AggregateVote = {
    count: number
    avg: VoteAvgAggregateOutputType | null
    sum: VoteSumAggregateOutputType | null
    min: VoteMinAggregateOutputType | null
    max: VoteMaxAggregateOutputType | null
  }

  export type VoteAvgAggregateOutputType = {
    id: number
    linkId: number
    userId: number
  }

  export type VoteSumAggregateOutputType = {
    id: number
    linkId: number
    userId: number
  }

  export type VoteMinAggregateOutputType = {
    id: number
    linkId: number
    userId: number
  }

  export type VoteMaxAggregateOutputType = {
    id: number
    linkId: number
    userId: number
  }


  export type VoteAvgAggregateInputType = {
    id?: true
    linkId?: true
    userId?: true
  }

  export type VoteSumAggregateInputType = {
    id?: true
    linkId?: true
    userId?: true
  }

  export type VoteMinAggregateInputType = {
    id?: true
    linkId?: true
    userId?: true
  }

  export type VoteMaxAggregateInputType = {
    id?: true
    linkId?: true
    userId?: true
  }

  export type AggregateVoteArgs = {
    where?: VoteWhereInput
    orderBy?: XOR<Enumerable<VoteOrderByInput>, VoteOrderByInput>
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VoteDistinctFieldEnum>
    count?: true
    avg?: VoteAvgAggregateInputType
    sum?: VoteSumAggregateInputType
    min?: VoteMinAggregateInputType
    max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends AggregateVoteArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetVoteAggregateScalarType<T[P]>
  }

  export type GetVoteAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof VoteAvgAggregateOutputType ? VoteAvgAggregateOutputType[P] : never
  }
    
    

  export type VoteSelect = {
    id?: boolean
    link?: boolean | LinkArgs
    linkId?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }

  export type VoteInclude = {
    link?: boolean | LinkArgs
    user?: boolean | UserArgs
  }

  export type VoteGetPayload<
    S extends boolean | null | undefined | VoteArgs,
    U = keyof S
      > = S extends true
        ? Vote
    : S extends undefined
    ? never
    : S extends VoteArgs | FindManyVoteArgs
    ?'include' extends U
    ? Vote  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'link'
        ? LinkGetPayload<S['include'][P]> :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Vote ?Vote [P]
  : 
          P extends 'link'
        ? LinkGetPayload<S['select'][P]> :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Vote
  : Vote


  export interface VoteDelegate {
    /**
     * Find zero or one Vote that matches the filter.
     * @param {FindUniqueVoteArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueVoteArgs>(
      args: Subset<T, FindUniqueVoteArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote | null>, Prisma__VoteClient<VoteGetPayload<T> | null>>
    /**
     * Find the first Vote that matches the filter.
     * @param {FindFirstVoteArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstVoteArgs>(
      args?: Subset<T, FindFirstVoteArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote | null>, Prisma__VoteClient<VoteGetPayload<T> | null>>
    /**
     * Find zero or more Votes that matches the filter.
     * @param {FindManyVoteArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyVoteArgs>(
      args?: Subset<T, FindManyVoteArgs>
    ): CheckSelect<T, Promise<Array<Vote>>, Promise<Array<VoteGetPayload<T>>>>
    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
    **/
    create<T extends VoteCreateArgs>(
      args: Subset<T, VoteCreateArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>
    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
    **/
    delete<T extends VoteDeleteArgs>(
      args: Subset<T, VoteDeleteArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>
    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VoteUpdateArgs>(
      args: Subset<T, VoteUpdateArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>
    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VoteDeleteManyArgs>(
      args: Subset<T, VoteDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Votes.
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VoteUpdateManyArgs>(
      args: Subset<T, VoteUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
    **/
    upsert<T extends VoteUpsertArgs>(
      args: Subset<T, VoteUpsertArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>
    /**
     * Find zero or one Vote that matches the filter.
     * @param {FindUniqueVoteArgs} args - Arguments to find a Vote
     * @deprecated This will be deprecated please use prisma.vote.findUnique
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueVoteArgs>(
      args: Subset<T, FindUniqueVoteArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote | null>, Prisma__VoteClient<VoteGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyVoteArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateVoteArgs>(args: Subset<T, AggregateVoteArgs>): Promise<GetVoteAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VoteClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    link<T extends LinkArgs = {}>(args?: Subset<T, LinkArgs>): CheckSelect<T, Prisma__LinkClient<Link | null>, Prisma__LinkClient<LinkGetPayload<T> | null>>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Vote findUnique
   */
  export type FindUniqueVoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
    **/
    select?: XOR<VoteSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VoteInclude, null>
    /**
     * Filter, which Vote to fetch.
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote findFirst
   */
  export type FindFirstVoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
    **/
    select?: XOR<VoteSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VoteInclude, null>
    /**
     * Filter, which Vote to fetch.
    **/
    where?: VoteWhereInput
    orderBy?: XOR<Enumerable<VoteOrderByInput>, VoteOrderByInput>
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VoteDistinctFieldEnum>
  }


  /**
   * Vote findMany
   */
  export type FindManyVoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
    **/
    select?: XOR<VoteSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VoteInclude, null>
    /**
     * Filter, which Votes to fetch.
    **/
    where?: VoteWhereInput
    /**
     * Determine the order of the Votes to fetch.
    **/
    orderBy?: XOR<Enumerable<VoteOrderByInput>, VoteOrderByInput>
    /**
     * Sets the position for listing Votes.
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * The number of Votes to fetch. If negative number, it will take Votes before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Votes.
    **/
    skip?: number
    distinct?: Enumerable<VoteDistinctFieldEnum>
  }


  /**
   * Vote create
   */
  export type VoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Vote
    **/
    select?: XOR<VoteSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VoteInclude, null>
    /**
     * The data needed to create a Vote.
    **/
    data: VoteCreateInput
  }


  /**
   * Vote update
   */
  export type VoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vote
    **/
    select?: XOR<VoteSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VoteInclude, null>
    /**
     * The data needed to update a Vote.
    **/
    data: VoteUpdateInput
    /**
     * Choose, which Vote to update.
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs = {
    data: VoteUpdateManyMutationInput
    where?: VoteWhereInput
  }


  /**
   * Vote upsert
   */
  export type VoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vote
    **/
    select?: XOR<VoteSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VoteInclude, null>
    /**
     * The filter to search for the Vote to update in case it exists.
    **/
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
    **/
    create: VoteCreateInput
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
    **/
    update: VoteUpdateInput
  }


  /**
   * Vote delete
   */
  export type VoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vote
    **/
    select?: XOR<VoteSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VoteInclude, null>
    /**
     * Filter which Vote to delete.
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs = {
    where?: VoteWhereInput
  }


  /**
   * Vote without action
   */
  export type VoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
    **/
    select?: XOR<VoteSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<VoteInclude, null>
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const LinkDistinctFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    description: 'description',
    url: 'url',
    postedById: 'postedById'
  };

  export type LinkDistinctFieldEnum = (typeof LinkDistinctFieldEnum)[keyof typeof LinkDistinctFieldEnum]


  export const UserDistinctFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password'
  };

  export type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


  export const VoteDistinctFieldEnum: {
    id: 'id',
    linkId: 'linkId',
    userId: 'userId'
  };

  export type VoteDistinctFieldEnum = (typeof VoteDistinctFieldEnum)[keyof typeof VoteDistinctFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type LinkWhereInput = {
    AND?: XOR<LinkWhereInput, Enumerable<LinkWhereInput>>
    OR?: XOR<LinkWhereInput, Enumerable<LinkWhereInput>>
    NOT?: XOR<LinkWhereInput, Enumerable<LinkWhereInput>>
    id?: XOR<IntFilter, number>
    createdAt?: XOR<DateTimeFilter, Date | string>
    description?: XOR<StringFilter, string>
    url?: XOR<StringFilter, string>
    postedBy?: XOR<UserRelationFilter, UserWhereInput>
    postedById?: XOR<IntFilter, number>
    votes?: VoteListRelationFilter
  }

  export type LinkOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    description?: SortOrder
    url?: SortOrder
    postedById?: SortOrder
  }

  export type LinkWhereUniqueInput = {
    id?: number
  }

  export type UserWhereInput = {
    AND?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
    OR?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
    NOT?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
    id?: XOR<IntFilter, number>
    name?: XOR<StringFilter, string>
    email?: XOR<StringFilter, string>
    password?: XOR<StringFilter, string>
    links?: LinkListRelationFilter
    votes?: VoteListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type VoteWhereInput = {
    AND?: XOR<VoteWhereInput, Enumerable<VoteWhereInput>>
    OR?: XOR<VoteWhereInput, Enumerable<VoteWhereInput>>
    NOT?: XOR<VoteWhereInput, Enumerable<VoteWhereInput>>
    id?: XOR<IntFilter, number>
    link?: XOR<LinkRelationFilter, LinkWhereInput>
    linkId?: XOR<IntFilter, number>
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: XOR<IntFilter, number>
  }

  export type VoteOrderByInput = {
    id?: SortOrder
    linkId?: SortOrder
    userId?: SortOrder
  }

  export type VoteWhereUniqueInput = {
    id?: number
    linkId_userId?: LinkIdUserIdCompoundUniqueInput
  }

  export type LinkCreateInput = {
    createdAt?: Date | string
    description: string
    url: string
    postedBy: UserCreateOneWithoutLinksInput
    votes?: VoteCreateManyWithoutLinkInput
  }

  export type LinkUpdateInput = {
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    description?: XOR<string, StringFieldUpdateOperationsInput>
    url?: XOR<string, StringFieldUpdateOperationsInput>
    postedBy?: UserUpdateOneRequiredWithoutLinksInput
    votes?: VoteUpdateManyWithoutLinkInput
  }

  export type LinkUpdateManyMutationInput = {
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    description?: XOR<string, StringFieldUpdateOperationsInput>
    url?: XOR<string, StringFieldUpdateOperationsInput>
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    links?: LinkCreateManyWithoutPostedByInput
    votes?: VoteCreateManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: XOR<string, StringFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    password?: XOR<string, StringFieldUpdateOperationsInput>
    links?: LinkUpdateManyWithoutPostedByInput
    votes?: VoteUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    name?: XOR<string, StringFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    password?: XOR<string, StringFieldUpdateOperationsInput>
  }

  export type VoteCreateInput = {
    link: LinkCreateOneWithoutVotesInput
    user: UserCreateOneWithoutVotesInput
  }

  export type VoteUpdateInput = {
    link?: LinkUpdateOneRequiredWithoutVotesInput
    user?: UserUpdateOneRequiredWithoutVotesInput
  }

  export type VoteUpdateManyMutationInput = {

  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedIntFilter>
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: XOR<Date | string, NestedDateTimeFilter>
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: XOR<string, NestedStringFilter>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type LinkListRelationFilter = {
    every?: LinkWhereInput
    some?: LinkWhereInput
    none?: LinkWhereInput
  }

  export type LinkRelationFilter = {
    is?: LinkWhereInput
    isNot?: LinkWhereInput
  }

  export type LinkIdUserIdCompoundUniqueInput = {
    linkId: number
    userId: number
  }

  export type UserCreateOneWithoutLinksInput = {
    create?: UserCreateWithoutLinksInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutlinksInput
  }

  export type VoteCreateManyWithoutLinkInput = {
    create?: XOR<VoteCreateWithoutLinkInput, Enumerable<VoteCreateWithoutLinkInput>>
    connect?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    connectOrCreate?: XOR<VoteCreateOrConnectWithoutlinkInput, Enumerable<VoteCreateOrConnectWithoutlinkInput>>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutLinksInput = {
    create?: UserCreateWithoutLinksInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutLinksInput
    upsert?: UserUpsertWithoutLinksInput
    connectOrCreate?: UserCreateOrConnectWithoutlinksInput
  }

  export type VoteUpdateManyWithoutLinkInput = {
    create?: XOR<VoteCreateWithoutLinkInput, Enumerable<VoteCreateWithoutLinkInput>>
    connect?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    set?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    disconnect?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    delete?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    update?: XOR<VoteUpdateWithWhereUniqueWithoutLinkInput, Enumerable<VoteUpdateWithWhereUniqueWithoutLinkInput>>
    updateMany?: XOR<VoteUpdateManyWithWhereWithoutLinkInput, Enumerable<VoteUpdateManyWithWhereWithoutLinkInput>>
    deleteMany?: XOR<VoteScalarWhereInput, Enumerable<VoteScalarWhereInput>>
    upsert?: XOR<VoteUpsertWithWhereUniqueWithoutLinkInput, Enumerable<VoteUpsertWithWhereUniqueWithoutLinkInput>>
    connectOrCreate?: XOR<VoteCreateOrConnectWithoutlinkInput, Enumerable<VoteCreateOrConnectWithoutlinkInput>>
  }

  export type LinkCreateManyWithoutPostedByInput = {
    create?: XOR<LinkCreateWithoutPostedByInput, Enumerable<LinkCreateWithoutPostedByInput>>
    connect?: XOR<LinkWhereUniqueInput, Enumerable<LinkWhereUniqueInput>>
    connectOrCreate?: XOR<LinkCreateOrConnectWithoutpostedByInput, Enumerable<LinkCreateOrConnectWithoutpostedByInput>>
  }

  export type VoteCreateManyWithoutUserInput = {
    create?: XOR<VoteCreateWithoutUserInput, Enumerable<VoteCreateWithoutUserInput>>
    connect?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    connectOrCreate?: XOR<VoteCreateOrConnectWithoutuserInput, Enumerable<VoteCreateOrConnectWithoutuserInput>>
  }

  export type LinkUpdateManyWithoutPostedByInput = {
    create?: XOR<LinkCreateWithoutPostedByInput, Enumerable<LinkCreateWithoutPostedByInput>>
    connect?: XOR<LinkWhereUniqueInput, Enumerable<LinkWhereUniqueInput>>
    set?: XOR<LinkWhereUniqueInput, Enumerable<LinkWhereUniqueInput>>
    disconnect?: XOR<LinkWhereUniqueInput, Enumerable<LinkWhereUniqueInput>>
    delete?: XOR<LinkWhereUniqueInput, Enumerable<LinkWhereUniqueInput>>
    update?: XOR<LinkUpdateWithWhereUniqueWithoutPostedByInput, Enumerable<LinkUpdateWithWhereUniqueWithoutPostedByInput>>
    updateMany?: XOR<LinkUpdateManyWithWhereWithoutPostedByInput, Enumerable<LinkUpdateManyWithWhereWithoutPostedByInput>>
    deleteMany?: XOR<LinkScalarWhereInput, Enumerable<LinkScalarWhereInput>>
    upsert?: XOR<LinkUpsertWithWhereUniqueWithoutPostedByInput, Enumerable<LinkUpsertWithWhereUniqueWithoutPostedByInput>>
    connectOrCreate?: XOR<LinkCreateOrConnectWithoutpostedByInput, Enumerable<LinkCreateOrConnectWithoutpostedByInput>>
  }

  export type VoteUpdateManyWithoutUserInput = {
    create?: XOR<VoteCreateWithoutUserInput, Enumerable<VoteCreateWithoutUserInput>>
    connect?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    set?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    disconnect?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    delete?: XOR<VoteWhereUniqueInput, Enumerable<VoteWhereUniqueInput>>
    update?: XOR<VoteUpdateWithWhereUniqueWithoutUserInput, Enumerable<VoteUpdateWithWhereUniqueWithoutUserInput>>
    updateMany?: XOR<VoteUpdateManyWithWhereWithoutUserInput, Enumerable<VoteUpdateManyWithWhereWithoutUserInput>>
    deleteMany?: XOR<VoteScalarWhereInput, Enumerable<VoteScalarWhereInput>>
    upsert?: XOR<VoteUpsertWithWhereUniqueWithoutUserInput, Enumerable<VoteUpsertWithWhereUniqueWithoutUserInput>>
    connectOrCreate?: XOR<VoteCreateOrConnectWithoutuserInput, Enumerable<VoteCreateOrConnectWithoutuserInput>>
  }

  export type LinkCreateOneWithoutVotesInput = {
    create?: LinkCreateWithoutVotesInput
    connect?: LinkWhereUniqueInput
    connectOrCreate?: LinkCreateOrConnectWithoutvotesInput
  }

  export type UserCreateOneWithoutVotesInput = {
    create?: UserCreateWithoutVotesInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutvotesInput
  }

  export type LinkUpdateOneRequiredWithoutVotesInput = {
    create?: LinkCreateWithoutVotesInput
    connect?: LinkWhereUniqueInput
    update?: LinkUpdateWithoutVotesInput
    upsert?: LinkUpsertWithoutVotesInput
    connectOrCreate?: LinkCreateOrConnectWithoutvotesInput
  }

  export type UserUpdateOneRequiredWithoutVotesInput = {
    create?: UserCreateWithoutVotesInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutVotesInput
    upsert?: UserUpsertWithoutVotesInput
    connectOrCreate?: UserCreateOrConnectWithoutvotesInput
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedIntFilter>
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: XOR<Date | string, NestedDateTimeFilter>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: XOR<string, NestedStringFilter>
  }

  export type UserCreateWithoutLinksInput = {
    name: string
    email: string
    password: string
    votes?: VoteCreateManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutlinksInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutLinksInput
  }

  export type VoteCreateWithoutLinkInput = {
    user: UserCreateOneWithoutVotesInput
  }

  export type VoteCreateOrConnectWithoutlinkInput = {
    where: VoteWhereUniqueInput
    create: VoteCreateWithoutLinkInput
  }

  export type UserUpdateWithoutLinksInput = {
    name?: XOR<string, StringFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    password?: XOR<string, StringFieldUpdateOperationsInput>
    votes?: VoteUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutLinksInput = {
    update: UserUpdateWithoutLinksInput
    create: UserCreateWithoutLinksInput
  }

  export type VoteUpdateWithWhereUniqueWithoutLinkInput = {
    where: VoteWhereUniqueInput
    data: VoteUpdateWithoutLinkInput
  }

  export type VoteUpdateManyWithWhereWithoutLinkInput = {
    where: VoteScalarWhereInput
    data: VoteUpdateManyMutationInput
  }

  export type VoteScalarWhereInput = {
    AND?: XOR<VoteScalarWhereInput, Enumerable<VoteScalarWhereInput>>
    OR?: XOR<VoteScalarWhereInput, Enumerable<VoteScalarWhereInput>>
    NOT?: XOR<VoteScalarWhereInput, Enumerable<VoteScalarWhereInput>>
    id?: XOR<IntFilter, number>
    linkId?: XOR<IntFilter, number>
    userId?: XOR<IntFilter, number>
  }

  export type VoteUpsertWithWhereUniqueWithoutLinkInput = {
    where: VoteWhereUniqueInput
    update: VoteUpdateWithoutLinkInput
    create: VoteCreateWithoutLinkInput
  }

  export type LinkCreateWithoutPostedByInput = {
    createdAt?: Date | string
    description: string
    url: string
    votes?: VoteCreateManyWithoutLinkInput
  }

  export type LinkCreateOrConnectWithoutpostedByInput = {
    where: LinkWhereUniqueInput
    create: LinkCreateWithoutPostedByInput
  }

  export type VoteCreateWithoutUserInput = {
    link: LinkCreateOneWithoutVotesInput
  }

  export type VoteCreateOrConnectWithoutuserInput = {
    where: VoteWhereUniqueInput
    create: VoteCreateWithoutUserInput
  }

  export type LinkUpdateWithWhereUniqueWithoutPostedByInput = {
    where: LinkWhereUniqueInput
    data: LinkUpdateWithoutPostedByInput
  }

  export type LinkUpdateManyWithWhereWithoutPostedByInput = {
    where: LinkScalarWhereInput
    data: LinkUpdateManyMutationInput
  }

  export type LinkScalarWhereInput = {
    AND?: XOR<LinkScalarWhereInput, Enumerable<LinkScalarWhereInput>>
    OR?: XOR<LinkScalarWhereInput, Enumerable<LinkScalarWhereInput>>
    NOT?: XOR<LinkScalarWhereInput, Enumerable<LinkScalarWhereInput>>
    id?: XOR<IntFilter, number>
    createdAt?: XOR<DateTimeFilter, Date | string>
    description?: XOR<StringFilter, string>
    url?: XOR<StringFilter, string>
    postedById?: XOR<IntFilter, number>
  }

  export type LinkUpsertWithWhereUniqueWithoutPostedByInput = {
    where: LinkWhereUniqueInput
    update: LinkUpdateWithoutPostedByInput
    create: LinkCreateWithoutPostedByInput
  }

  export type VoteUpdateWithWhereUniqueWithoutUserInput = {
    where: VoteWhereUniqueInput
    data: VoteUpdateWithoutUserInput
  }

  export type VoteUpdateManyWithWhereWithoutUserInput = {
    where: VoteScalarWhereInput
    data: VoteUpdateManyMutationInput
  }

  export type VoteUpsertWithWhereUniqueWithoutUserInput = {
    where: VoteWhereUniqueInput
    update: VoteUpdateWithoutUserInput
    create: VoteCreateWithoutUserInput
  }

  export type LinkCreateWithoutVotesInput = {
    createdAt?: Date | string
    description: string
    url: string
    postedBy: UserCreateOneWithoutLinksInput
  }

  export type LinkCreateOrConnectWithoutvotesInput = {
    where: LinkWhereUniqueInput
    create: LinkCreateWithoutVotesInput
  }

  export type UserCreateWithoutVotesInput = {
    name: string
    email: string
    password: string
    links?: LinkCreateManyWithoutPostedByInput
  }

  export type UserCreateOrConnectWithoutvotesInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutVotesInput
  }

  export type LinkUpdateWithoutVotesInput = {
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    description?: XOR<string, StringFieldUpdateOperationsInput>
    url?: XOR<string, StringFieldUpdateOperationsInput>
    postedBy?: UserUpdateOneRequiredWithoutLinksInput
  }

  export type LinkUpsertWithoutVotesInput = {
    update: LinkUpdateWithoutVotesInput
    create: LinkCreateWithoutVotesInput
  }

  export type UserUpdateWithoutVotesInput = {
    name?: XOR<string, StringFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    password?: XOR<string, StringFieldUpdateOperationsInput>
    links?: LinkUpdateManyWithoutPostedByInput
  }

  export type UserUpsertWithoutVotesInput = {
    update: UserUpdateWithoutVotesInput
    create: UserCreateWithoutVotesInput
  }

  export type VoteUpdateWithoutLinkInput = {
    user?: UserUpdateOneRequiredWithoutVotesInput
  }

  export type LinkUpdateWithoutPostedByInput = {
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    description?: XOR<string, StringFieldUpdateOperationsInput>
    url?: XOR<string, StringFieldUpdateOperationsInput>
    votes?: VoteUpdateManyWithoutLinkInput
  }

  export type VoteUpdateWithoutUserInput = {
    link?: LinkUpdateOneRequiredWithoutVotesInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatiblity introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.LinkDistinctFieldEnum`
 */
export type LinkDistinctFieldEnum = Prisma.LinkDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.UserDistinctFieldEnum`
 */
export type UserDistinctFieldEnum = Prisma.UserDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.VoteDistinctFieldEnum`
 */
export type VoteDistinctFieldEnum = Prisma.VoteDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateLink`
 */
export type AggregateLink = Prisma.AggregateLink

/**
 * @deprecated Renamed to `Prisma.LinkAvgAggregateOutputType`
 */
export type LinkAvgAggregateOutputType = Prisma.LinkAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LinkSumAggregateOutputType`
 */
export type LinkSumAggregateOutputType = Prisma.LinkSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LinkMinAggregateOutputType`
 */
export type LinkMinAggregateOutputType = Prisma.LinkMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LinkMaxAggregateOutputType`
 */
export type LinkMaxAggregateOutputType = Prisma.LinkMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateLinkArgs`
 */
export type AggregateLinkArgs = Prisma.AggregateLinkArgs

/**
 * @deprecated Renamed to `Prisma.LinkAvgAggregateInputType`
 */
export type LinkAvgAggregateInputType = Prisma.LinkAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LinkSumAggregateInputType`
 */
export type LinkSumAggregateInputType = Prisma.LinkSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LinkMinAggregateInputType`
 */
export type LinkMinAggregateInputType = Prisma.LinkMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LinkMaxAggregateInputType`
 */
export type LinkMaxAggregateInputType = Prisma.LinkMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LinkSelect`
 */
export type LinkSelect = Prisma.LinkSelect

/**
 * @deprecated Renamed to `Prisma.LinkInclude`
 */
export type LinkInclude = Prisma.LinkInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueLinkArgs`
 */
export type FindUniqueLinkArgs = Prisma.FindUniqueLinkArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstLinkArgs`
 */
export type FindFirstLinkArgs = Prisma.FindFirstLinkArgs

/**
 * @deprecated Renamed to `Prisma.FindManyLinkArgs`
 */
export type FindManyLinkArgs = Prisma.FindManyLinkArgs

/**
 * @deprecated Renamed to `Prisma.LinkCreateArgs`
 */
export type LinkCreateArgs = Prisma.LinkCreateArgs

/**
 * @deprecated Renamed to `Prisma.LinkUpdateArgs`
 */
export type LinkUpdateArgs = Prisma.LinkUpdateArgs

/**
 * @deprecated Renamed to `Prisma.LinkUpdateManyArgs`
 */
export type LinkUpdateManyArgs = Prisma.LinkUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.LinkUpsertArgs`
 */
export type LinkUpsertArgs = Prisma.LinkUpsertArgs

/**
 * @deprecated Renamed to `Prisma.LinkDeleteArgs`
 */
export type LinkDeleteArgs = Prisma.LinkDeleteArgs

/**
 * @deprecated Renamed to `Prisma.LinkDeleteManyArgs`
 */
export type LinkDeleteManyArgs = Prisma.LinkDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateUser`
 */
export type AggregateUser = Prisma.AggregateUser

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateOutputType`
 */
export type UserAvgAggregateOutputType = Prisma.UserAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateOutputType`
 */
export type UserSumAggregateOutputType = Prisma.UserSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateOutputType`
 */
export type UserMinAggregateOutputType = Prisma.UserMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateOutputType`
 */
export type UserMaxAggregateOutputType = Prisma.UserMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUserArgs`
 */
export type AggregateUserArgs = Prisma.AggregateUserArgs

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateInputType`
 */
export type UserAvgAggregateInputType = Prisma.UserAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateInputType`
 */
export type UserSumAggregateInputType = Prisma.UserSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateInputType`
 */
export type UserMinAggregateInputType = Prisma.UserMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateInputType`
 */
export type UserMaxAggregateInputType = Prisma.UserMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSelect`
 */
export type UserSelect = Prisma.UserSelect

/**
 * @deprecated Renamed to `Prisma.UserInclude`
 */
export type UserInclude = Prisma.UserInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueUserArgs`
 */
export type FindUniqueUserArgs = Prisma.FindUniqueUserArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstUserArgs`
 */
export type FindFirstUserArgs = Prisma.FindFirstUserArgs

/**
 * @deprecated Renamed to `Prisma.FindManyUserArgs`
 */
export type FindManyUserArgs = Prisma.FindManyUserArgs

/**
 * @deprecated Renamed to `Prisma.UserCreateArgs`
 */
export type UserCreateArgs = Prisma.UserCreateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateArgs`
 */
export type UserUpdateArgs = Prisma.UserUpdateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyArgs`
 */
export type UserUpdateManyArgs = Prisma.UserUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.UserUpsertArgs`
 */
export type UserUpsertArgs = Prisma.UserUpsertArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteArgs`
 */
export type UserDeleteArgs = Prisma.UserDeleteArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteManyArgs`
 */
export type UserDeleteManyArgs = Prisma.UserDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateVote`
 */
export type AggregateVote = Prisma.AggregateVote

/**
 * @deprecated Renamed to `Prisma.VoteAvgAggregateOutputType`
 */
export type VoteAvgAggregateOutputType = Prisma.VoteAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VoteSumAggregateOutputType`
 */
export type VoteSumAggregateOutputType = Prisma.VoteSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VoteMinAggregateOutputType`
 */
export type VoteMinAggregateOutputType = Prisma.VoteMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VoteMaxAggregateOutputType`
 */
export type VoteMaxAggregateOutputType = Prisma.VoteMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateVoteArgs`
 */
export type AggregateVoteArgs = Prisma.AggregateVoteArgs

/**
 * @deprecated Renamed to `Prisma.VoteAvgAggregateInputType`
 */
export type VoteAvgAggregateInputType = Prisma.VoteAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VoteSumAggregateInputType`
 */
export type VoteSumAggregateInputType = Prisma.VoteSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VoteMinAggregateInputType`
 */
export type VoteMinAggregateInputType = Prisma.VoteMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VoteMaxAggregateInputType`
 */
export type VoteMaxAggregateInputType = Prisma.VoteMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VoteSelect`
 */
export type VoteSelect = Prisma.VoteSelect

/**
 * @deprecated Renamed to `Prisma.VoteInclude`
 */
export type VoteInclude = Prisma.VoteInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueVoteArgs`
 */
export type FindUniqueVoteArgs = Prisma.FindUniqueVoteArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstVoteArgs`
 */
export type FindFirstVoteArgs = Prisma.FindFirstVoteArgs

/**
 * @deprecated Renamed to `Prisma.FindManyVoteArgs`
 */
export type FindManyVoteArgs = Prisma.FindManyVoteArgs

/**
 * @deprecated Renamed to `Prisma.VoteCreateArgs`
 */
export type VoteCreateArgs = Prisma.VoteCreateArgs

/**
 * @deprecated Renamed to `Prisma.VoteUpdateArgs`
 */
export type VoteUpdateArgs = Prisma.VoteUpdateArgs

/**
 * @deprecated Renamed to `Prisma.VoteUpdateManyArgs`
 */
export type VoteUpdateManyArgs = Prisma.VoteUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.VoteUpsertArgs`
 */
export type VoteUpsertArgs = Prisma.VoteUpsertArgs

/**
 * @deprecated Renamed to `Prisma.VoteDeleteArgs`
 */
export type VoteDeleteArgs = Prisma.VoteDeleteArgs

/**
 * @deprecated Renamed to `Prisma.VoteDeleteManyArgs`
 */
export type VoteDeleteManyArgs = Prisma.VoteDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.LinkWhereInput`
 */
export type LinkWhereInput = Prisma.LinkWhereInput

/**
 * @deprecated Renamed to `Prisma.LinkOrderByInput`
 */
export type LinkOrderByInput = Prisma.LinkOrderByInput

/**
 * @deprecated Renamed to `Prisma.LinkWhereUniqueInput`
 */
export type LinkWhereUniqueInput = Prisma.LinkWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.UserWhereInput`
 */
export type UserWhereInput = Prisma.UserWhereInput

/**
 * @deprecated Renamed to `Prisma.UserOrderByInput`
 */
export type UserOrderByInput = Prisma.UserOrderByInput

/**
 * @deprecated Renamed to `Prisma.UserWhereUniqueInput`
 */
export type UserWhereUniqueInput = Prisma.UserWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.VoteWhereInput`
 */
export type VoteWhereInput = Prisma.VoteWhereInput

/**
 * @deprecated Renamed to `Prisma.VoteOrderByInput`
 */
export type VoteOrderByInput = Prisma.VoteOrderByInput

/**
 * @deprecated Renamed to `Prisma.VoteWhereUniqueInput`
 */
export type VoteWhereUniqueInput = Prisma.VoteWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.LinkCreateInput`
 */
export type LinkCreateInput = Prisma.LinkCreateInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateInput`
 */
export type LinkUpdateInput = Prisma.LinkUpdateInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateManyMutationInput`
 */
export type LinkUpdateManyMutationInput = Prisma.LinkUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.UserCreateInput`
 */
export type UserCreateInput = Prisma.UserCreateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateInput`
 */
export type UserUpdateInput = Prisma.UserUpdateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyMutationInput`
 */
export type UserUpdateManyMutationInput = Prisma.UserUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.VoteCreateInput`
 */
export type VoteCreateInput = Prisma.VoteCreateInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateInput`
 */
export type VoteUpdateInput = Prisma.VoteUpdateInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateManyMutationInput`
 */
export type VoteUpdateManyMutationInput = Prisma.VoteUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.UserRelationFilter`
 */
export type UserRelationFilter = Prisma.UserRelationFilter

/**
 * @deprecated Renamed to `Prisma.VoteListRelationFilter`
 */
export type VoteListRelationFilter = Prisma.VoteListRelationFilter

/**
 * @deprecated Renamed to `Prisma.LinkListRelationFilter`
 */
export type LinkListRelationFilter = Prisma.LinkListRelationFilter

/**
 * @deprecated Renamed to `Prisma.LinkRelationFilter`
 */
export type LinkRelationFilter = Prisma.LinkRelationFilter

/**
 * @deprecated Renamed to `Prisma.LinkIdUserIdCompoundUniqueInput`
 */
export type LinkIdUserIdCompoundUniqueInput = Prisma.LinkIdUserIdCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutLinksInput`
 */
export type UserCreateOneWithoutLinksInput = Prisma.UserCreateOneWithoutLinksInput

/**
 * @deprecated Renamed to `Prisma.VoteCreateManyWithoutLinkInput`
 */
export type VoteCreateManyWithoutLinkInput = Prisma.VoteCreateManyWithoutLinkInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutLinksInput`
 */
export type UserUpdateOneRequiredWithoutLinksInput = Prisma.UserUpdateOneRequiredWithoutLinksInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateManyWithoutLinkInput`
 */
export type VoteUpdateManyWithoutLinkInput = Prisma.VoteUpdateManyWithoutLinkInput

/**
 * @deprecated Renamed to `Prisma.LinkCreateManyWithoutPostedByInput`
 */
export type LinkCreateManyWithoutPostedByInput = Prisma.LinkCreateManyWithoutPostedByInput

/**
 * @deprecated Renamed to `Prisma.VoteCreateManyWithoutUserInput`
 */
export type VoteCreateManyWithoutUserInput = Prisma.VoteCreateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateManyWithoutPostedByInput`
 */
export type LinkUpdateManyWithoutPostedByInput = Prisma.LinkUpdateManyWithoutPostedByInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateManyWithoutUserInput`
 */
export type VoteUpdateManyWithoutUserInput = Prisma.VoteUpdateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LinkCreateOneWithoutVotesInput`
 */
export type LinkCreateOneWithoutVotesInput = Prisma.LinkCreateOneWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutVotesInput`
 */
export type UserCreateOneWithoutVotesInput = Prisma.UserCreateOneWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateOneRequiredWithoutVotesInput`
 */
export type LinkUpdateOneRequiredWithoutVotesInput = Prisma.LinkUpdateOneRequiredWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutVotesInput`
 */
export type UserUpdateOneRequiredWithoutVotesInput = Prisma.UserUpdateOneRequiredWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutLinksInput`
 */
export type UserCreateWithoutLinksInput = Prisma.UserCreateWithoutLinksInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutlinksInput`
 */
export type UserCreateOrConnectWithoutlinksInput = Prisma.UserCreateOrConnectWithoutlinksInput

/**
 * @deprecated Renamed to `Prisma.VoteCreateWithoutLinkInput`
 */
export type VoteCreateWithoutLinkInput = Prisma.VoteCreateWithoutLinkInput

/**
 * @deprecated Renamed to `Prisma.VoteCreateOrConnectWithoutlinkInput`
 */
export type VoteCreateOrConnectWithoutlinkInput = Prisma.VoteCreateOrConnectWithoutlinkInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutLinksInput`
 */
export type UserUpdateWithoutLinksInput = Prisma.UserUpdateWithoutLinksInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutLinksInput`
 */
export type UserUpsertWithoutLinksInput = Prisma.UserUpsertWithoutLinksInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateWithWhereUniqueWithoutLinkInput`
 */
export type VoteUpdateWithWhereUniqueWithoutLinkInput = Prisma.VoteUpdateWithWhereUniqueWithoutLinkInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateManyWithWhereWithoutLinkInput`
 */
export type VoteUpdateManyWithWhereWithoutLinkInput = Prisma.VoteUpdateManyWithWhereWithoutLinkInput

/**
 * @deprecated Renamed to `Prisma.VoteScalarWhereInput`
 */
export type VoteScalarWhereInput = Prisma.VoteScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.VoteUpsertWithWhereUniqueWithoutLinkInput`
 */
export type VoteUpsertWithWhereUniqueWithoutLinkInput = Prisma.VoteUpsertWithWhereUniqueWithoutLinkInput

/**
 * @deprecated Renamed to `Prisma.LinkCreateWithoutPostedByInput`
 */
export type LinkCreateWithoutPostedByInput = Prisma.LinkCreateWithoutPostedByInput

/**
 * @deprecated Renamed to `Prisma.LinkCreateOrConnectWithoutpostedByInput`
 */
export type LinkCreateOrConnectWithoutpostedByInput = Prisma.LinkCreateOrConnectWithoutpostedByInput

/**
 * @deprecated Renamed to `Prisma.VoteCreateWithoutUserInput`
 */
export type VoteCreateWithoutUserInput = Prisma.VoteCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.VoteCreateOrConnectWithoutuserInput`
 */
export type VoteCreateOrConnectWithoutuserInput = Prisma.VoteCreateOrConnectWithoutuserInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateWithWhereUniqueWithoutPostedByInput`
 */
export type LinkUpdateWithWhereUniqueWithoutPostedByInput = Prisma.LinkUpdateWithWhereUniqueWithoutPostedByInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateManyWithWhereWithoutPostedByInput`
 */
export type LinkUpdateManyWithWhereWithoutPostedByInput = Prisma.LinkUpdateManyWithWhereWithoutPostedByInput

/**
 * @deprecated Renamed to `Prisma.LinkScalarWhereInput`
 */
export type LinkScalarWhereInput = Prisma.LinkScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.LinkUpsertWithWhereUniqueWithoutPostedByInput`
 */
export type LinkUpsertWithWhereUniqueWithoutPostedByInput = Prisma.LinkUpsertWithWhereUniqueWithoutPostedByInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateWithWhereUniqueWithoutUserInput`
 */
export type VoteUpdateWithWhereUniqueWithoutUserInput = Prisma.VoteUpdateWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateManyWithWhereWithoutUserInput`
 */
export type VoteUpdateManyWithWhereWithoutUserInput = Prisma.VoteUpdateManyWithWhereWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.VoteUpsertWithWhereUniqueWithoutUserInput`
 */
export type VoteUpsertWithWhereUniqueWithoutUserInput = Prisma.VoteUpsertWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LinkCreateWithoutVotesInput`
 */
export type LinkCreateWithoutVotesInput = Prisma.LinkCreateWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.LinkCreateOrConnectWithoutvotesInput`
 */
export type LinkCreateOrConnectWithoutvotesInput = Prisma.LinkCreateOrConnectWithoutvotesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutVotesInput`
 */
export type UserCreateWithoutVotesInput = Prisma.UserCreateWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutvotesInput`
 */
export type UserCreateOrConnectWithoutvotesInput = Prisma.UserCreateOrConnectWithoutvotesInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateWithoutVotesInput`
 */
export type LinkUpdateWithoutVotesInput = Prisma.LinkUpdateWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.LinkUpsertWithoutVotesInput`
 */
export type LinkUpsertWithoutVotesInput = Prisma.LinkUpsertWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutVotesInput`
 */
export type UserUpdateWithoutVotesInput = Prisma.UserUpdateWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutVotesInput`
 */
export type UserUpsertWithoutVotesInput = Prisma.UserUpsertWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateWithoutLinkInput`
 */
export type VoteUpdateWithoutLinkInput = Prisma.VoteUpdateWithoutLinkInput

/**
 * @deprecated Renamed to `Prisma.LinkUpdateWithoutPostedByInput`
 */
export type LinkUpdateWithoutPostedByInput = Prisma.LinkUpdateWithoutPostedByInput

/**
 * @deprecated Renamed to `Prisma.VoteUpdateWithoutUserInput`
 */
export type VoteUpdateWithoutUserInput = Prisma.VoteUpdateWithoutUserInput